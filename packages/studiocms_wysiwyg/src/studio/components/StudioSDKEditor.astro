---
import '@grapesjs/studio-sdk/style';
import type { PluginPageTypeEditorProps } from 'studiocms/types';
import { importComponentsKeys } from 'studiocms/lib/renderer/runtime.js';
import { firstUpperCase, AstroSVG } from 'studiocms:wysiwyg/studio/client';

const componentKeys = Object.keys(await importComponentsKeys());

const AstroComponentBlocks = componentKeys.map((key) => ({
	id: `astro-component-${key}`,
	label: firstUpperCase(key),
	category: 'Astro Components',
	media: AstroSVG,
	key,
}));

interface Props extends PluginPageTypeEditorProps {}
---
<div class="cnt-body">
  <div class="editor" 
    data-blocks={JSON.stringify(AstroComponentBlocks || [])}
    data-compkeys={JSON.stringify(componentKeys || [])}
    ></div>
  <textarea id="page-content" name="page-content" style="display: none;">{Astro.props.content}</textarea>
</div>

<script>
    import { licenseKey, youtubeAPIKey, getEditorSettings } from 'studiocms:wysiwyg/studio/client';
    import { 
      tableComponent, fsLightboxComponent, 
      lightGalleryComponent, swiperComponent, 
      iconifyComponent, accordionComponent,
      flexComponent, rteTinyMce,
      canvasEmptyState, youtubeAssetProvider,
    } from "@grapesjs/studio-sdk-plugins";
    import createStudioEditor, { StudioCommands, type CreateEditorOptions, type WithEditorProps } from '@grapesjs/studio-sdk';

    const editor = document.querySelector<HTMLDivElement>('.editor') as HTMLDivElement;
    const pageContent = document.querySelector<HTMLTextAreaElement>('#page-content') as HTMLTextAreaElement;

    const plugins: CreateEditorOptions["plugins"] = [
      tableComponent.init({
        block: { category: 'Extra', label: 'My Table' }
      }),
      fsLightboxComponent?.init({
        block: false // Skip default block
      }),
      // Add custom blocks for the lightbox
      (editor: WithEditorProps['editor']) => {
        editor.Blocks.add('lightbox-image', {
          label: 'Image',
          category: 'Lightbox',
          media: '<svg viewBox="0 0 24 24"><path d="M5,14L8.5,9.5L11,12.5L14.5,8L19,14M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4C22,2.89 21.1,2 20,2Z" /></svg>',
          content: {
            type: 'fslightbox',
            attributes: { href: 'https://placehold.co/300/777/white.png?text=Image+LB+(Open)' },
            components: `<h2>Image</h2><img src="https://placehold.co/300/777/white.png?text=Image+LB">`
          }
        });
        editor.Blocks.add('lightbox-video', {
          label: 'Video',
          category: 'Lightbox',
          media: '<svg viewBox="0 0 24 24"><path d="M18,14L14,10.8V14H6V6H14V9.2L18,6M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4C22,2.89 21.1,2 20,2Z" /></svg>',
          content: {
            type: 'fslightbox',
            'source-type': 'video',
            attributes: { href: 'https://videos.pexels.com/video-files/15462514/15462514-uhd_2560_1440_30fps.mp4' },
            components: `<h2>Video</h2><img src="https://images.pexels.com/videos/15462514/pexels-photo-15462514.jpeg?auto=compress&cs=tinysrgb&dpr=1&h=300">`
          }
        });
        editor.Blocks.add('lightbox-el', {
          label: 'Element',
          category: 'Lightbox',
          media: '<svg viewBox="0 0 24 24"><path d="M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4A2,2 0 0,0 20,2M8,14H6V12H8V14M8,11H6V9H8V11M8,8H6V6H8V8M15,14H10V12H15V14M18,11H10V9H18V11M18,8H10V6H18V8Z" /></svg>',
          content: () => { // Generate block with dynamic IDs
            const randomId = Math.random().toString(36).substring(9);
            const id = `el-id-${randomId}`;
            return [
              {
                type: 'fslightbox',
                'source-type': 'el',
                attributes: { href: `#${id}`, 'data-fslightbox': 'custom-elements' },
                components: `<h2>Custom element #${randomId}</h2>`
              },
              `<div style="display: none">
                <div id="${id}" class="custom-element">Custom content #${randomId}</div>
              </div>`
            ];
          }
        });
      },
      lightGalleryComponent?.init({
        block: false // Skip default block
      }),
      // Add custom gallery blocks
      (editor: WithEditorProps['editor']) => {
        editor.Blocks.add('gallery-images', {
          label: 'Gallery Images',
          category: 'LightGallery',
          media: '<svg viewBox="0 0 24 24"><path d="M5,14L8.5,9.5L11,12.5L14.5,8L19,14M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4C22,2.89 21.1,2 20,2Z" /></svg>',
          content: {
            type: 'lightGallery',
            components: [
              {
                type: 'lightGallery-item',
                attributes: { href: 'https://placehold.co/1500/777/white.png?text=Image+1+(Open)' },
                components: { type: 'image', src: 'https://placehold.co/100/777/white.png?text=Image+1' }
              },
              {
                type: 'lightGallery-item',
                attributes: { href: 'https://placehold.co/1500/777/white.png?text=Image+2+(Open)' },
                components: { type: 'image', src: 'https://placehold.co/100/777/white.png?text=Image+2' }
              }
            ]
          }
        });
        editor.Blocks.add('gallery-videos', {
          label: 'Gallery Video',
          category: 'LightGallery',
          media: '<svg viewBox="0 0 24 24"><path d="M18,14L14,10.8V14H6V6H14V9.2L18,6M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4C22,2.89 21.1,2 20,2Z" /></svg>',
          content: {
            type: 'lightGallery',
            components: [
              {
                type: 'lightGallery-item',
                attributes: { 'data-src': 'https://www.youtube.com/watch?v=EIUJfXk3_3w', 'data-sub-html': 'Video Caption 1' },
                components: { type: 'image', src: 'https://img.youtube.com/vi/EIUJfXk3_3w/maxresdefault.jpg', style: { width: '200px' } }
              },
              {
                type: 'lightGallery-item',
                attributes: { 'data-src': 'https://vimeo.com/112836958', 'data-sub-html': 'Video Caption 2' },
                components: { type: 'image', src: 'https://i.vimeocdn.com/video/506427660-2e93a42675715090a52de8e6645d592c5f58c1a7e388231d801072c9b2d9843d-d?mw=300', style: { width: '200px' } }
              }
            ]
          }
        });
      },
      swiperComponent?.init({
        block: false // Skip default block
      }),
      // Add custom blocks for the swiper
      (editor: WithEditorProps['editor']) => {
        editor.Blocks.add('swiper', {
          label: 'Swiper Slider',
          category: 'Swiper example',
          media: '<svg viewBox="0 0 24 24"><path d="M22 7.6c0-1-.5-1.6-1.3-1.6H3.4C2.5 6 2 6.7 2 7.6v9.8c0 1 .5 1.6 1.3 1.6h17.4c.8 0 1.3-.6 1.3-1.6V7.6zM21 18H3V7h18v11z" fill-rule="nonzero"/><path d="M4 12.5L6 14v-3zM20 12.5L18 14v-3z"/></svg>',
          content: `<div class="swiper" style="height: 200px">
            <div class="swiper-wrapper">
              <div class="swiper-slide"><div>Slide 1</div></div>
              <div class="swiper-slide"><div>Slide 2</div></div>
              <div class="swiper-slide"><div>Slide 3</div></div>
            </div>
            <div class="swiper-button-next"></div>
            <div class="swiper-button-prev"></div>
          </div>`
        });
      },
      iconifyComponent.init({
        block: { category: 'Extra', label: 'Iconify' }
      }),
      accordionComponent.init({
        block: { category: 'Extra' },
        blockGroup: { category: 'Extra' },
      }),
      flexComponent.init({}),
      rteTinyMce.init({
        loadConfig: ({ editor }) => {
          const { theme } = editor.runCommand(StudioCommands.getStateTheme);

            return {
              toolbar: "bold italic underline strikethrough forecolor backcolor alignleft aligncenter alignright alignjustify link image | fontfamily fontsize bullist numlist outdent indent table",
              skin: (theme === 'auto' ? (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light') : theme) === 'dark' ? 'oxide-dark' : 'oxide',
            }
          }
      }),
      canvasEmptyState?.init({
        emptyStates: [
          {
            isValid: ['wrapper'],
            render: ({ editor, mount, unmount }) => {
              const container = document.createElement('div');
              container.className = 'empty-state-wrapper';
              container.innerHTML = `
                <div class="empty-state-wrapper__card">
                  <div class="empty-state-wrapper__content">
                    <h1>This is the empty state element of the body!</h1>
                    <p>Drop the column block to see another component with a custom empty state!</p>
                  </div>
                  <button class="empty-state-wrapper__btn">Add Block</button>
                </div>
  
                <style>
                .empty-state-wrapper {
                  font-family: system-ui, sans-serif;
                  background-color: #f5f5f5;
                  display: flex;
                  justify-content: center;
                  align-items: center;
                  height: 100dvh;
                }
                .empty-state-wrapper__card {
                  text-align: center;
                  display: flex;
                  flex-direction: column;
                  align-items: center;
                  justify-content: center;
                  padding: 24px;
                  border-radius: 4px;
                  background-color: white;
                  color: #333;
                  gap: 16px;
                }
                .empty-state-wrapper__btn {
                  background-color: #8b5cf6;
                  padding: 8px 16px;
                  margin: 0;
                  color: white;
                  border: none;
                  cursor: pointer;
                  border-radius: 4px;
                }
                </style>
              `;
  
              const btn = container.querySelector('button') as HTMLButtonElement;
              btn.addEventListener('click', () => {
                editor.runCommand('studio:layoutToggle', {
                  id: 'emptyStateWrapperBlocks',
                  layout: { type: 'panelBlocks' },
                  header: { label: 'Blocks' },
                  placer: { type: 'absolute', position: 'left' }
                });
              });
  
              // Mount the empty state container
              mount(container);
              return () => unmount(container);
            }
          },
          {
            isValid: ({ component }) => component.is('gridColumn'),
            render: ({ editor, component, mount }) => {
              const container = document.createElement('div');
              container.className = 'empty-state-wrapper';
              container.innerHTML = `
                <button class="empty-state-column__btn">Add text to column</button>
                <style>
                  .empty-state-wrapper {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                  }
                  .empty-state-column__btn {
                    background-color: #8b5cf6;
                    padding: 8px 16px;
                    margin: 0;
                    color: white;
                    border: none;
                    cursor: pointer;
                    border-radius: 4px;
                  }
                </style>
              `;
              const btn = container.querySelector('button') as HTMLButtonElement;
              btn.addEventListener('click', () => {
                const textCmp = component.append('<div>New Text</div>')[0];
                editor.select(textCmp);
                textCmp.trigger('active');
              });
              mount(container);
            }
          }
        ]
      }),
    ];

    if (youtubeAPIKey) {
      plugins.push(
        youtubeAssetProvider.init({
          apiKey: youtubeAPIKey,
          searchParams: ({ searchValue }) => ({
            q: searchValue || 'Default search query',
          })
        }),
        (editor: WithEditorProps['editor']) => {
          editor.onReady(() => {
            const videoCmp = editor.getWrapper()?.findType('video')[0];
            editor.select(videoCmp);
          });
        },
      )
    }

    createStudioEditor(getEditorSettings(licenseKey, editor, pageContent, plugins));
</script>

<style>
  :root {
    font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
    line-height: 1.5;
    font-weight: 400;
  
    color-scheme: light dark;
    color: rgba(255, 255, 255, 0.87);
    background-color: #242424;
  
    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .cnt-body {
    display: flex;
    flex-direction: column;
    height: 80dvh;
  }
  .editor {
    height: 100%;
  }
</style>