---
import 'quill/dist/quill.snow.css';
import socialsConfig from 'studiocms:socialposter/config';
import { Card, Toggle, Button, Icon } from 'studiocms:ui/components';

const { bluesky, threads, twitter } = socialsConfig;
---
<div class="socials-container">

    {/* 
    
        // TODO: Add support for being able to display pages and their current content to make it easy to get excerpts for creating new posts.

    */}

    <Card fullWidth as="form" action="#" id="socials-post">
        <div slot="header">
            <h2>Create Your Post</h2>
        </div>

        <div class="card-content">

            <div id="editor"></div>
    
            <div>Select where to post</div>

            { bluesky && <Toggle label="BlueSky" name="bluesky" color={'info'} /> }
            { threads && <Toggle label="Threads / Instagram" name="threads" color={'info'} /> }
            { twitter && <Toggle label="Twitter / X" name="twitter" color={'info'} /> }

        </div>

        <div slot="footer" style="display: flex; justify-content: space-between;">
            <div id="counter">0 / 280</div>

            <Button id="post-button" variant={'solid'} color={'primary'} type="submit">
                <Icon slot="start-content" name={'share-20-solid'} width={20} height={20} />
                Create Post
            </Button>
        </div>
    </Card>
</div>

<script>
    import Quill from 'quill';
    import { toast } from 'studiocms:ui/components';

    const editor = document.getElementById('editor') as HTMLDivElement;
    const form = document.getElementById('socials-post') as HTMLFormElement;

    class Counter {
        quill: Quill;
        options: { container: string };
        container: HTMLElement;

        constructor(quill: Quill, options: { container: string }) {
            this.quill = quill;
            this.options = options;
            this.container = document.querySelector(options.container) as HTMLElement;
            quill.on(Quill.events.TEXT_CHANGE, this.update.bind(this));
        }

        calculate() {
            const text = this.quill.getText().trim();
            return text.length;
        }

        update() {
            const length = this.calculate();
            this.container.innerText = `${length} / 280`;
            if (length > 280) {
                this.container.style.color = 'hsl(var(--danger-active))';
                this.container.style.backgroundColor = 'hsl(var(--danger-flat-active))'
            } else {
                this.container.style.color = 'hsl(var(--text-muted))';
                this.container.style.backgroundColor = 'hsl(var(--background-step-2))'
            }
        }
    }

    Quill.register('modules/counter', Counter);

    // We can now initialize Quill with something like this:
    const quill = new Quill(editor, {
        theme: 'snow',
        placeholder: 'What are you doing?',
        modules: {
            toolbar: false,
            counter: {
                container: '#counter',
            },
        },
    });

    form.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(form);

        const content = quill.getText().trim();

        if (!content || content === '') {
            toast({
                title: 'Error',
                type: 'danger',
                description: 'Content is empty!'
            });
            return;
        }

        if (content.length > 280) {
            toast({
                title: 'Error',
                type: 'danger',
                description: 'Content must be under 280 characters!'
            })
            return;
        }

        const bluesky = formData.get('bluesky') === 'on'
        const threads = formData.get('threads') === 'on'
        const twitter = formData.get('twitter') === 'on'

        if (!bluesky && !threads && !twitter) {
            toast({
                title: 'Error',
                type: 'danger',
                description: 'No Options Selected!'
            });
            return;
        }

        const jsonData = {
            bluesky,
            threads,
            twitter,
            content,
        }

        const todo: { url: string, name: string }[] = []

        if (bluesky) {
            todo.push({ 
                name: 'BlueSky', 
                url: '/studiocms_api/socialposter/post-to-bluesky' 
            });
        }
        if (threads) {
            todo.push({ 
                name: 'Threads', 
                url: '/studiocms_api/socialposter/post-to-threads' 
            });
        }
        if (twitter) {
            todo.push({ 
                name: 'Twitter', 
                url: '/studiocms_api/socialposter/post-to-twitter' 
            });
        }

        const responses: any = []

        for (const item of todo) {
            const response = await fetch(item.url, {
                body: JSON.stringify(jsonData),
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })

            if (response.ok) {
                const responseData = await response.json();
                responses.push(responseData);
            }
        }

        let errors: number = 0

        for (const item of responses) {
            if ('error' in item) {
                toast({
                    title: 'Error',
                    description: item.error,
                    type: 'danger'
                })
                errors += 1
            }
        }

        if (errors === 0) {
            toast({
                title: 'Success',
                description: `Successfully posted to: ${todo.map(({name}) => name).join(', ')}`,
                type: 'success'
            })
        }
    })
</script>

<style is:global>
    .ql-editor.ql-blank::before {
        color: hsl(var(--text-muted))
    }

    #label-bluesky::before {
        display: inline-block;
        width: 18.13px;
        height: 16px;
        vertical-align: -0.125em;
        content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 256 226'%3E%3Cpath fill='%231185fe' d='M55.491 15.172c29.35 22.035 60.917 66.712 72.509 90.686c11.592-23.974 43.159-68.651 72.509-90.686C221.686-.727 256-13.028 256 26.116c0 7.818-4.482 65.674-7.111 75.068c-9.138 32.654-42.436 40.983-72.057 35.942c51.775 8.812 64.946 38 36.501 67.187c-54.021 55.433-77.644-13.908-83.696-31.676c-1.11-3.257-1.63-4.78-1.637-3.485c-.008-1.296-.527.228-1.637 3.485c-6.052 17.768-29.675 87.11-83.696 31.676c-28.445-29.187-15.274-58.375 36.5-67.187c-29.62 5.041-62.918-3.288-72.056-35.942C4.482 91.79 0 33.934 0 26.116C0-13.028 34.314-.727 55.491 15.172'/%3E%3C/svg%3E");
    }

    #label-threads::before {
        display: inline-block;
        width: 16px;
        height: 16px;
        vertical-align: -0.125em;
        content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23fff' d='M16.705 11.108c-.162-2.987-1.794-4.697-4.534-4.714c-1.652-.01-3.033.69-3.879 1.973L9.8 9.4c.634-.961 1.635-1.16 2.36-1.153c.903.006 1.583.268 2.024.78c.32.372.535.887.642 1.536q-1.202-.204-2.59-.125c-2.606.15-4.28 1.67-4.168 3.781c.057 1.071.59 1.993 1.502 2.595c.77.509 1.764.757 2.795.701c1.363-.075 2.432-.594 3.178-1.545c.566-.722.924-1.658 1.082-2.836c.65.392 1.13.907 1.397 1.527c.452 1.054.478 2.786-.935 4.198c-1.238 1.236-2.726 1.772-4.975 1.788c-2.495-.018-4.382-.819-5.608-2.378c-1.15-1.46-1.743-3.57-1.765-6.269c.022-2.7.616-4.809 1.765-6.27c1.226-1.559 3.113-2.359 5.608-2.377c2.513.019 4.432.822 5.706 2.39c.625.768 1.095 1.734 1.406 2.86l1.766-.47c-.377-1.387-.969-2.582-1.774-3.573c-1.633-2.01-4.033-3.039-7.11-3.06c-3.071.021-5.432 1.055-7.019 3.071c-1.411 1.795-2.14 4.306-2.164 7.436c.024 3.13.753 5.627 2.164 7.422c1.587 2.016 3.96 3.05 7.03 3.071c2.731-.019 4.655-.734 6.24-2.317c2.075-2.073 2.012-4.67 1.329-6.264c-.525-1.225-1.57-2.206-2.98-2.81m-4.438 4.557c-1.142.064-2.328-.448-2.387-1.546c-.043-.814.58-1.722 2.457-1.83a9.4 9.4 0 0 1 2.533.174c-.216 2.702-1.485 3.14-2.603 3.202'/%3E%3C/svg%3E");
    }

    #label-twitter::before {
        display: inline-block;
        width: 16px;
        height: 16px;
        vertical-align: -0.125em;
        content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='%23fff' d='M.102 0h4.71l4.193 5.997L14.04 0h1.505L9.58 6.82L16 16h-4.71L6.911 9.738L1.504 16H0l6.337-7.083z'/%3E%3C/svg%3E");
    }

    [data-theme='light'] {
        #label-threads::before {
            display: inline-block;
            width: 16px;
            height: 16px;
            vertical-align: -0.125em;
            content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23000' d='M16.705 11.108c-.162-2.987-1.794-4.697-4.534-4.714c-1.652-.01-3.033.69-3.879 1.973L9.8 9.4c.634-.961 1.635-1.16 2.36-1.153c.903.006 1.583.268 2.024.78c.32.372.535.887.642 1.536q-1.202-.204-2.59-.125c-2.606.15-4.28 1.67-4.168 3.781c.057 1.071.59 1.993 1.502 2.595c.77.509 1.764.757 2.795.701c1.363-.075 2.432-.594 3.178-1.545c.566-.722.924-1.658 1.082-2.836c.65.392 1.13.907 1.397 1.527c.452 1.054.478 2.786-.935 4.198c-1.238 1.236-2.726 1.772-4.975 1.788c-2.495-.018-4.382-.819-5.608-2.378c-1.15-1.46-1.743-3.57-1.765-6.269c.022-2.7.616-4.809 1.765-6.27c1.226-1.559 3.113-2.359 5.608-2.377c2.513.019 4.432.822 5.706 2.39c.625.768 1.095 1.734 1.406 2.86l1.766-.47c-.377-1.387-.969-2.582-1.774-3.573c-1.633-2.01-4.033-3.039-7.11-3.06c-3.071.021-5.432 1.055-7.019 3.071c-1.411 1.795-2.14 4.306-2.164 7.436c.024 3.13.753 5.627 2.164 7.422c1.587 2.016 3.96 3.05 7.03 3.071c2.731-.019 4.655-.734 6.24-2.317c2.075-2.073 2.012-4.67 1.329-6.264c-.525-1.225-1.57-2.206-2.98-2.81m-4.438 4.557c-1.142.064-2.328-.448-2.387-1.546c-.043-.814.58-1.722 2.457-1.83a9.4 9.4 0 0 1 2.533.174c-.216 2.702-1.485 3.14-2.603 3.202'/%3E%3C/svg%3E");
        }

        #label-twitter::before {
            display: inline-block;
            width: 16px;
            height: 16px;
            vertical-align: -0.125em;
            content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='%23000' d='M.102 0h4.71l4.193 5.997L14.04 0h1.505L9.58 6.82L16 16h-4.71L6.911 9.738L1.504 16H0l6.337-7.083z'/%3E%3C/svg%3E");
        }
    }

</style>

<style>
    .socials-container {
        padding-left: 1rem;
        padding-right: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .card-content {
        display: flex;
        flex-direction: column;
        gap: .5rem;
    }

    #editor {
        border: 1px solid hsl(var(--border));
        border-radius: var(--radius-md);
        width: 100%;
        height: 10rem;
        background-color: hsl(var(--background-step-1));
        color: hsl(var(--text-normal))
    }

    #counter {
        border: 1px solid hsl(var(--border));
        background-color: hsl(var(--background-step-2));
        border-radius: var(--radius-lg);
        border-width: 1px 1px 1px 1px;
        color: hsl(var(--text-muted));
        align-items: center;
        text-align: center;
        width: 6rem;
        align-content: center;
    }
</style>