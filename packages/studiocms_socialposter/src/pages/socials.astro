---
import 'quill/dist/quill.snow.css';
import socialsConfig from 'studiocms:socialposter/config';
import { Card, Toggle, Button, Icon } from 'studiocms:ui/components';

const { bluesky, threads, twitter } = socialsConfig;
---
<div class="socials-container">

    {/* 
    
        // TODO: Add support for being able to display pages and their current content to make it easy to get excerpts for creating new posts.

    */}

    <Card fullWidth as="form" action="#" id="socials-post">
        <div slot="header">
            <h2>Create Your Post</h2>
        </div>

        <div class="card-content">

            <div id="editor"></div>
    
            <div>Select where to post:</div>

            { bluesky && <Toggle label="BlueSky" name="bluesky" color={'info'} /> }
            { threads && <Toggle label="Threads / Instagram" name="threads" color={'info'} /> }
            { twitter && <Toggle label="Twitter / X" name="twitter" color={'info'} /> }

        </div>

        <div slot="footer" style="display: flex; justify-content: space-between;">
            <div id="counter">0 / 280</div>

            <Button id="post-button" variant={'solid'} color={'primary'} type="submit">
                <Icon slot="start-content" name={'share-20-solid'} width={20} height={20} />
                Create Post
            </Button>
        </div>
    </Card>
</div>

<script>
    import Quill from 'quill';
    import { toast } from 'studiocms:ui/components';

    const editor = document.getElementById('editor') as HTMLDivElement;
    const form = document.getElementById('socials-post') as HTMLFormElement;

    class Counter {
        quill: Quill;
        options: { container: string };
        container: HTMLElement;

        constructor(quill: Quill, options: { container: string }) {
            this.quill = quill;
            this.options = options;
            this.container = document.querySelector(options.container) as HTMLElement;
            quill.on(Quill.events.TEXT_CHANGE, this.update.bind(this));
        }

        calculate() {
            const text = this.quill.getText().trim();
            return text.length;
        }

        update() {
            const length = this.calculate();
            this.container.innerText = `${length} / 280`;
            if (length > 280) {
                this.container.style.color = 'hsl(var(--danger-active))';
                this.container.style.backgroundColor = 'hsl(var(--danger-flat-active))'
            } else {
                this.container.style.color = 'hsl(var(--text-muted))';
                this.container.style.backgroundColor = 'hsl(var(--background-step-2))'
            }
        }
    }

    Quill.register('modules/counter', Counter);

    // We can now initialize Quill with something like this:
    const quill = new Quill(editor, {
        theme: 'snow',
        placeholder: 'What are you doing?',
        modules: {
            toolbar: false,
            counter: {
                container: '#counter',
            },
        },
    });

    form.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(form);

        const content = quill.getText().trim();

        if (!content || content === '') {
            toast({
                title: 'Error',
                type: 'danger',
                description: 'Content is empty!'
            });
            return;
        }

        if (content.length > 280) {
            toast({
                title: 'Error',
                type: 'danger',
                description: 'Content must be under 280 characters!'
            })
            return;
        }

        const bluesky = formData.get('bluesky') === 'on'
        const threads = formData.get('threads') === 'on'
        const twitter = formData.get('twitter') === 'on'

        if (!bluesky && !threads && !twitter) {
            toast({
                title: 'Error',
                type: 'danger',
                description: 'No Options Selected!'
            });
            return;
        }

        const jsonData = {
            bluesky,
            threads,
            twitter,
            content,
        }

        const todo: { url: string, name: string }[] = []

        if (bluesky) {
            todo.push({ 
                name: 'BlueSky', 
                url: '/studiocms_api/socialposter/post-to-bluesky' 
            });
        }
        if (threads) {
            todo.push({ 
                name: 'Threads', 
                url: '/studiocms_api/socialposter/post-to-threads' 
            });
        }
        if (twitter) {
            todo.push({ 
                name: 'Twitter', 
                url: '/studiocms_api/socialposter/post-to-twitter' 
            });
        }

        const responses: any = []

        for (const item of todo) {
            const response = await fetch(item.url, {
                body: JSON.stringify(jsonData),
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })

            if (response.ok) {
                const responseData = await response.json();
                responses.push(responseData);
            }
        }

        let errors: number = 0

        for (const item of responses) {
            if ('error' in item) {
                toast({
                    title: 'Error',
                    description: item.error,
                    type: 'danger'
                })
                errors += 1
            }
        }

        if (errors === 0) {
            toast({
                title: 'Success',
                description: `Successfully posted to: ${todo.map(({name}) => name).join(', ')}`,
                type: 'success'
            })
        }
    })
</script>

<style>
    .socials-container {
        padding-left: 1rem;
        padding-right: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .card-content {
        display: flex;
        flex-direction: column;
        gap: .5rem;
    }

    #editor {
        border: 1px solid hsl(var(--border));
        border-radius: var(--radius-md);
        width: 100%;
    }

    #counter {
        border: 1px solid hsl(var(--border));
        background-color: hsl(var(--background-step-2));
        border-radius: var(--radius-lg);
        border-width: 1px 1px 1px 1px;
        color: hsl(var(--text-muted));
        align-items: center;
        text-align: center;
        width: 6rem;
        align-content: center;
    }
</style>